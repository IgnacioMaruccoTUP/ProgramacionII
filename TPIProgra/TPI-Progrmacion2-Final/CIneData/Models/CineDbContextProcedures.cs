// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using CIneData.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CIneData.Models
{
    public partial class CineDbContext
    {
        private ICineDbContextProcedures _procedures;

        public virtual ICineDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CineDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ICineDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class CineDbContextProcedures : ICineDbContextProcedures
    {
        private readonly CineDbContext _context;

        public CineDbContextProcedures(CineDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<EncontrarConflictoResult>> EncontrarConflictoAsync(DateTime? Horario, int? IdPelicula, int? IdSala, int? idFuncion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Horario",
                    Value = Horario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdPelicula",
                    Value = IdPelicula ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSala",
                    Value = IdSala ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idFuncion",
                    Value = idFuncion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EncontrarConflictoResult>("EXEC @returnValue = [dbo].[EncontrarConflicto] @Horario = @Horario, @IdPelicula = @IdPelicula, @IdSala = @IdSala, @idFuncion = @idFuncion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
